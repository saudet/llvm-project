; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=ve -mattr=+vpu | FileCheck %s

; <256 x i32>

; Function Attrs: nounwind
define fastcc <256 x i32> @add_vv_v256i32(<256 x i32> %x, <256 x i32> %y) {
; CHECK-LABEL: add_vv_v256i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vadds.w.sx %v0, %v0, %v1
; CHECK-NEXT:    b.l.t (, %s10)
  %z = add <256 x i32> %x, %y
  ret <256 x i32> %z
}

; Function Attrs: nounwind
define fastcc <256 x i32> @add_sv_v256i32(i32 %x, <256 x i32> %y) {
; CHECK-LABEL: add_sv_v256i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vadds.w.sx %v0, %s0, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %xins = insertelement <256 x i32> undef, i32 %x, i32 0
  %vx = shufflevector <256 x i32> %xins, <256 x i32> undef, <256 x i32> zeroinitializer
  %z = add <256 x i32> %vx, %y
  ret <256 x i32> %z
}

; Function Attrs: nounwind
define fastcc <256 x i32> @add_vs_v256i32(<256 x i32> %x, i32 %y) {
; CHECK-LABEL: add_vs_v256i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vadds.w.sx %v0, %s0, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %yins = insertelement <256 x i32> undef, i32 %y, i32 0
  %vy = shufflevector <256 x i32> %yins, <256 x i32> undef, <256 x i32> zeroinitializer
  %z = add <256 x i32> %x, %vy
  ret <256 x i32> %z
}



; <256 x i64>

; Function Attrs: nounwind
define fastcc <256 x i64> @add_vv_v256i64(<256 x i64> %x, <256 x i64> %y) {
; CHECK-LABEL: add_vv_v256i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vadds.l %v0, %v0, %v1
; CHECK-NEXT:    b.l.t (, %s10)
  %z = add <256 x i64> %x, %y
  ret <256 x i64> %z
}

; Function Attrs: nounwind
define fastcc <256 x i64> @add_sv_v256i64(i64 %x, <256 x i64> %y) {
; CHECK-LABEL: add_sv_v256i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vadds.l %v0, %s0, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %xins = insertelement <256 x i64> undef, i64 %x, i32 0
  %vx = shufflevector <256 x i64> %xins, <256 x i64> undef, <256 x i32> zeroinitializer
  %z = add <256 x i64> %vx, %y
  ret <256 x i64> %z
}

; Function Attrs: nounwind
define fastcc <256 x i64> @add_vs_v256i64(<256 x i64> %x, i64 %y) {
; CHECK-LABEL: add_vs_v256i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s1, 256
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vadds.l %v0, %s0, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %yins = insertelement <256 x i64> undef, i64 %y, i32 0
  %vy = shufflevector <256 x i64> %yins, <256 x i64> undef, <256 x i32> zeroinitializer
  %z = add <256 x i64> %x, %vy
  ret <256 x i64> %z
}

; <128 x i64>
; We expect this to be widened.

; Function Attrs: nounwind
define fastcc <128 x i64> @add_vv_v128i64(<128 x i64> %x, <128 x i64> %y) {
; CHECK-LABEL: add_vv_v128i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 128
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vadds.l %v0, %v0, %v1
; CHECK-NEXT:    b.l.t (, %s10)
  %z = add <128 x i64> %x, %y
  ret <128 x i64> %z
}

; <256 x i16>
; We expect promotion.

; Function Attrs: nounwind
define fastcc <256 x i16> @add_vv_v256i16(<256 x i16> %x, <256 x i16> %y) {
; CHECK-LABEL: add_vv_v256i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lea %s0, 256
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vadds.w.sx %v0, %v0, %v1
; CHECK-NEXT:    b.l.t (, %s10)
  %z = add <256 x i16> %x, %y
  ret <256 x i16> %z
}

; <128 x i16>
; We expect this to be scalarized (for now).

; Function Attrs: nounwind
define fastcc <128 x i16> @add_vv_v128i16(<128 x i16> %x, <128 x i16> %y) {
; CHECK-LABEL: add_vv_v128i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st %s9, (, %s11)
; CHECK-NEXT:    st %s10, 8(, %s11)
; CHECK-NEXT:    or %s9, 0, %s11
; CHECK-NEXT:    lea %s11, -496(, %s11)
; CHECK-NEXT:    brge.l.t %s11, %s8, .LBB8_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ld %s61, 24(, %s14)
; CHECK-NEXT:    or %s62, 0, %s0
; CHECK-NEXT:    lea %s63, 315
; CHECK-NEXT:    shm.l %s63, (%s61)
; CHECK-NEXT:    shm.l %s8, 8(%s61)
; CHECK-NEXT:    shm.l %s11, 16(%s61)
; CHECK-NEXT:    monc
; CHECK-NEXT:    or %s0, 0, %s62
; CHECK-NEXT:  .LBB8_2:
; CHECK-NEXT:    st %s18, 544(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s19, 552(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s20, 560(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s21, 568(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s22, 576(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s23, 584(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s24, 592(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s25, 600(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s26, 608(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s27, 616(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s28, 624(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s29, 632(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s30, 640(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s31, 648(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s32, 656(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    st %s33, 664(, %s11) # 8-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s32, 2112(, %s11)
; CHECK-NEXT:    ld2b.zx %s31, 2104(, %s11)
; CHECK-NEXT:    ld2b.zx %s28, 2080(, %s11)
; CHECK-NEXT:    ld2b.zx %s27, 2072(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2064(, %s11)
; CHECK-NEXT:    ld2b.zx %s35, 2056(, %s11)
; CHECK-NEXT:    ld2b.zx %s36, 2048(, %s11)
; CHECK-NEXT:    ld2b.zx %s23, 2040(, %s11)
; CHECK-NEXT:    ld2b.zx %s22, 2032(, %s11)
; CHECK-NEXT:    ld2b.zx %s21, 2024(, %s11)
; CHECK-NEXT:    ld2b.zx %s20, 2016(, %s11)
; CHECK-NEXT:    ld2b.zx %s19, 2008(, %s11)
; CHECK-NEXT:    ld2b.zx %s18, 2000(, %s11)
; CHECK-NEXT:    ld2b.zx %s63, 1992(, %s11)
; CHECK-NEXT:    ld2b.zx %s62, 1984(, %s11)
; CHECK-NEXT:    ld2b.zx %s61, 1976(, %s11)
; CHECK-NEXT:    ld2b.zx %s60, 1968(, %s11)
; CHECK-NEXT:    ld2b.zx %s59, 1960(, %s11)
; CHECK-NEXT:    ld2b.zx %s58, 1952(, %s11)
; CHECK-NEXT:    ld2b.zx %s57, 1944(, %s11)
; CHECK-NEXT:    ld2b.zx %s56, 1936(, %s11)
; CHECK-NEXT:    ld2b.zx %s55, 1928(, %s11)
; CHECK-NEXT:    ld2b.zx %s54, 1920(, %s11)
; CHECK-NEXT:    ld2b.zx %s53, 1912(, %s11)
; CHECK-NEXT:    ld2b.zx %s52, 1904(, %s11)
; CHECK-NEXT:    ld2b.zx %s51, 1896(, %s11)
; CHECK-NEXT:    ld2b.zx %s50, 1888(, %s11)
; CHECK-NEXT:    ld2b.zx %s49, 1880(, %s11)
; CHECK-NEXT:    ld2b.zx %s48, 1872(, %s11)
; CHECK-NEXT:    ld2b.zx %s47, 1864(, %s11)
; CHECK-NEXT:    ld2b.zx %s46, 1856(, %s11)
; CHECK-NEXT:    ld2b.zx %s45, 1848(, %s11)
; CHECK-NEXT:    ld2b.zx %s44, 1840(, %s11)
; CHECK-NEXT:    ld2b.zx %s43, 1832(, %s11)
; CHECK-NEXT:    ld2b.zx %s42, 1824(, %s11)
; CHECK-NEXT:    ld2b.zx %s41, 1816(, %s11)
; CHECK-NEXT:    ld2b.zx %s40, 1808(, %s11)
; CHECK-NEXT:    ld2b.zx %s39, 1800(, %s11)
; CHECK-NEXT:    ld2b.zx %s38, 1792(, %s11)
; CHECK-NEXT:    ld2b.zx %s37, 1784(, %s11)
; CHECK-NEXT:    ld2b.zx %s24, 1776(, %s11)
; CHECK-NEXT:    ld2b.zx %s25, 1768(, %s11)
; CHECK-NEXT:    ld2b.zx %s26, 1704(, %s11)
; CHECK-NEXT:    ld2b.zx %s29, 1760(, %s11)
; CHECK-NEXT:    ld2b.zx %s30, 1712(, %s11)
; CHECK-NEXT:    ld2b.zx %s33, 1720(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s26
; CHECK-NEXT:    stl %s1, 492(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 1728(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s30
; CHECK-NEXT:    stl %s2, 488(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 1736(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s33
; CHECK-NEXT:    stl %s3, 484(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 1744(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s4, %s1
; CHECK-NEXT:    stl %s1, 480(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 1752(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s5, %s2
; CHECK-NEXT:    stl %s2, 476(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 736(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s6, %s3
; CHECK-NEXT:    stl %s3, 472(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 744(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s7, %s1
; CHECK-NEXT:    stl %s1, 468(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 752(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s29
; CHECK-NEXT:    stl %s2, 464(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 760(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s25
; CHECK-NEXT:    stl %s3, 460(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 768(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s24
; CHECK-NEXT:    stl %s1, 456(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 776(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s37
; CHECK-NEXT:    stl %s2, 452(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 784(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s38
; CHECK-NEXT:    stl %s3, 448(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 792(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s39
; CHECK-NEXT:    stl %s1, 444(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 800(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s40
; CHECK-NEXT:    stl %s2, 440(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 808(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s41
; CHECK-NEXT:    stl %s3, 436(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 816(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s42
; CHECK-NEXT:    stl %s1, 432(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 824(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s43
; CHECK-NEXT:    stl %s2, 428(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 832(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s44
; CHECK-NEXT:    stl %s3, 424(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 840(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s45
; CHECK-NEXT:    stl %s1, 420(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 848(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s46
; CHECK-NEXT:    stl %s2, 416(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 856(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s47
; CHECK-NEXT:    stl %s3, 412(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 864(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s48
; CHECK-NEXT:    stl %s1, 408(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 872(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s49
; CHECK-NEXT:    stl %s2, 404(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 880(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s50
; CHECK-NEXT:    stl %s3, 400(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 888(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s51
; CHECK-NEXT:    stl %s1, 396(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 896(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s52
; CHECK-NEXT:    stl %s2, 392(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 904(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s53
; CHECK-NEXT:    stl %s3, 388(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 912(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s54
; CHECK-NEXT:    stl %s1, 384(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 920(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s55
; CHECK-NEXT:    stl %s2, 380(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 928(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s56
; CHECK-NEXT:    stl %s3, 376(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 936(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s57
; CHECK-NEXT:    stl %s1, 372(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 944(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s58
; CHECK-NEXT:    stl %s2, 368(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 952(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s59
; CHECK-NEXT:    stl %s3, 364(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 960(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s60
; CHECK-NEXT:    stl %s1, 360(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 968(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s61
; CHECK-NEXT:    stl %s2, 356(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 976(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s62
; CHECK-NEXT:    stl %s3, 352(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 984(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s63
; CHECK-NEXT:    stl %s1, 348(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 992(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s18
; CHECK-NEXT:    stl %s2, 344(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 1000(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s19
; CHECK-NEXT:    stl %s3, 340(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 1008(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s20
; CHECK-NEXT:    stl %s1, 336(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 1016(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s21
; CHECK-NEXT:    stl %s2, 332(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 1024(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s22
; CHECK-NEXT:    stl %s3, 328(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 1032(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s23
; CHECK-NEXT:    stl %s1, 324(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 1040(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s36
; CHECK-NEXT:    stl %s2, 320(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 1048(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s35
; CHECK-NEXT:    stl %s3, 316(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 1056(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s34
; CHECK-NEXT:    stl %s1, 312(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 2096(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s27
; CHECK-NEXT:    stl %s2, 308(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s2, 2088(, %s11)
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s28
; CHECK-NEXT:    stl %s3, 304(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s3, 1064(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1072(, %s11)
; CHECK-NEXT:    ld2b.zx %s5, 1080(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 1088(, %s11)
; CHECK-NEXT:    adds.w.sx %s2, %s3, %s2
; CHECK-NEXT:    stl %s2, 300(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s4, %s1
; CHECK-NEXT:    stl %s1, 296(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s5, %s31
; CHECK-NEXT:    stl %s1, 292(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s6, %s32
; CHECK-NEXT:    stl %s1, 288(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s1, 2144(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 2136(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 2128(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 2120(, %s11)
; CHECK-NEXT:    ld2b.zx %s5, 1096(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 1104(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 1112(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 1120(, %s11)
; CHECK-NEXT:    adds.w.sx %s4, %s5, %s4
; CHECK-NEXT:    stl %s4, 284(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s3, %s6, %s3
; CHECK-NEXT:    stl %s3, 280(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s2, %s7, %s2
; CHECK-NEXT:    stl %s2, 276(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s34, %s1
; CHECK-NEXT:    stl %s1, 272(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s34, 2176(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2168(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 2160(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 2152(, %s11)
; CHECK-NEXT:    ld2b.zx %s5, 1128(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 1136(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1144(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1152(, %s11)
; CHECK-NEXT:    adds.w.sx %s4, %s5, %s4
; CHECK-NEXT:    stl %s4, 268(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s3, %s6, %s3
; CHECK-NEXT:    stl %s3, 264(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s7
; CHECK-NEXT:    stl %s1, 260(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s2, %s34
; CHECK-NEXT:    stl %s1, 256(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s7, 2208(, %s11)
; CHECK-NEXT:    ld2b.zx %s5, 2200(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 2192(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2184(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 1160(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1168(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1176(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1184(, %s11)
; CHECK-NEXT:    adds.w.sx %s6, %s34, %s6
; CHECK-NEXT:    stl %s6, 252(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s4
; CHECK-NEXT:    stl %s1, 248(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s2, %s5
; CHECK-NEXT:    stl %s1, 244(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s3, %s7
; CHECK-NEXT:    stl %s1, 240(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s34, 2240(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2232(, %s11)
; CHECK-NEXT:    ld2b.zx %s5, 2224(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2216(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1192(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1200(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1208(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1216(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s7
; CHECK-NEXT:    stl %s1, 236(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s2, %s5
; CHECK-NEXT:    stl %s1, 232(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s3, %s6
; CHECK-NEXT:    stl %s1, 228(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s4, %s34
; CHECK-NEXT:    stl %s1, 224(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s5, 2272(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2264(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2256(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2248(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1224(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1232(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1240(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1248(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s34
; CHECK-NEXT:    stl %s1, 220(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s2, %s7
; CHECK-NEXT:    stl %s1, 216(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s3, %s6
; CHECK-NEXT:    stl %s1, 212(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s4, %s5
; CHECK-NEXT:    stl %s1, 208(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s5, 2304(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2296(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2288(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2280(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1256(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1264(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1272(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1280(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s34
; CHECK-NEXT:    stl %s1, 204(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s2, %s7
; CHECK-NEXT:    stl %s1, 200(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s3, %s6
; CHECK-NEXT:    stl %s1, 196(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s4, %s5
; CHECK-NEXT:    stl %s1, 192(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    ld2b.zx %s5, 2336(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2328(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2320(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2312(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1288(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1296(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1304(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1312(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s34
; CHECK-NEXT:    stl %s1, 188(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s2, %s7
; CHECK-NEXT:    stl %s1, 184(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s1, %s3, %s6
; CHECK-NEXT:    stl %s1, 180(, %s11) # 4-byte Folded Spill
; CHECK-NEXT:    adds.w.sx %s33, %s4, %s5
; CHECK-NEXT:    ld2b.zx %s5, 2368(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2360(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2352(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2344(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1320(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1328(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1336(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1344(, %s11)
; CHECK-NEXT:    adds.w.sx %s32, %s1, %s34
; CHECK-NEXT:    adds.w.sx %s31, %s2, %s7
; CHECK-NEXT:    adds.w.sx %s30, %s3, %s6
; CHECK-NEXT:    adds.w.sx %s29, %s4, %s5
; CHECK-NEXT:    ld2b.zx %s5, 2400(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2392(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2384(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2376(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1352(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1360(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1368(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1376(, %s11)
; CHECK-NEXT:    adds.w.sx %s28, %s1, %s34
; CHECK-NEXT:    adds.w.sx %s27, %s2, %s7
; CHECK-NEXT:    adds.w.sx %s26, %s3, %s6
; CHECK-NEXT:    adds.w.sx %s25, %s4, %s5
; CHECK-NEXT:    ld2b.zx %s5, 2432(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2424(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2416(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2408(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1384(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1392(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1400(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1408(, %s11)
; CHECK-NEXT:    adds.w.sx %s24, %s1, %s34
; CHECK-NEXT:    adds.w.sx %s23, %s2, %s7
; CHECK-NEXT:    adds.w.sx %s22, %s3, %s6
; CHECK-NEXT:    adds.w.sx %s21, %s4, %s5
; CHECK-NEXT:    ld2b.zx %s5, 2464(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2456(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2448(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2440(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1416(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1424(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1432(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1440(, %s11)
; CHECK-NEXT:    adds.w.sx %s20, %s1, %s34
; CHECK-NEXT:    adds.w.sx %s19, %s2, %s7
; CHECK-NEXT:    adds.w.sx %s18, %s3, %s6
; CHECK-NEXT:    adds.w.sx %s63, %s4, %s5
; CHECK-NEXT:    ld2b.zx %s5, 2496(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2488(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2480(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2472(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1448(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1456(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1464(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1472(, %s11)
; CHECK-NEXT:    adds.w.sx %s62, %s1, %s34
; CHECK-NEXT:    adds.w.sx %s61, %s2, %s7
; CHECK-NEXT:    adds.w.sx %s60, %s3, %s6
; CHECK-NEXT:    adds.w.sx %s59, %s4, %s5
; CHECK-NEXT:    ld2b.zx %s5, 2528(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2520(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2512(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2504(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1480(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1488(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1496(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1504(, %s11)
; CHECK-NEXT:    adds.w.sx %s58, %s1, %s34
; CHECK-NEXT:    adds.w.sx %s57, %s2, %s7
; CHECK-NEXT:    adds.w.sx %s56, %s3, %s6
; CHECK-NEXT:    adds.w.sx %s55, %s4, %s5
; CHECK-NEXT:    ld2b.zx %s5, 2560(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2552(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2544(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2536(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1512(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1520(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1528(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1536(, %s11)
; CHECK-NEXT:    adds.w.sx %s54, %s1, %s34
; CHECK-NEXT:    adds.w.sx %s53, %s2, %s7
; CHECK-NEXT:    adds.w.sx %s52, %s3, %s6
; CHECK-NEXT:    adds.w.sx %s51, %s4, %s5
; CHECK-NEXT:    ld2b.zx %s5, 2592(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2584(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2576(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2568(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1544(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1552(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1560(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1568(, %s11)
; CHECK-NEXT:    adds.w.sx %s50, %s1, %s34
; CHECK-NEXT:    adds.w.sx %s49, %s2, %s7
; CHECK-NEXT:    adds.w.sx %s48, %s3, %s6
; CHECK-NEXT:    adds.w.sx %s47, %s4, %s5
; CHECK-NEXT:    ld2b.zx %s5, 2624(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2616(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2608(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2600(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1576(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1584(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1592(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1600(, %s11)
; CHECK-NEXT:    adds.w.sx %s46, %s1, %s34
; CHECK-NEXT:    adds.w.sx %s45, %s2, %s7
; CHECK-NEXT:    adds.w.sx %s44, %s3, %s6
; CHECK-NEXT:    adds.w.sx %s43, %s4, %s5
; CHECK-NEXT:    ld2b.zx %s5, 2656(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2648(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2640(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2632(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1608(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1616(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1624(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1632(, %s11)
; CHECK-NEXT:    adds.w.sx %s42, %s1, %s34
; CHECK-NEXT:    adds.w.sx %s41, %s2, %s7
; CHECK-NEXT:    adds.w.sx %s40, %s3, %s6
; CHECK-NEXT:    adds.w.sx %s39, %s4, %s5
; CHECK-NEXT:    ld2b.zx %s5, 2688(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2680(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2672(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2664(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1640(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1648(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1656(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1664(, %s11)
; CHECK-NEXT:    adds.w.sx %s38, %s1, %s34
; CHECK-NEXT:    adds.w.sx %s37, %s2, %s7
; CHECK-NEXT:    adds.w.sx %s36, %s3, %s6
; CHECK-NEXT:    adds.w.sx %s35, %s4, %s5
; CHECK-NEXT:    ld2b.zx %s5, 2720(, %s11)
; CHECK-NEXT:    ld2b.zx %s6, 2712(, %s11)
; CHECK-NEXT:    ld2b.zx %s7, 2704(, %s11)
; CHECK-NEXT:    ld2b.zx %s34, 2696(, %s11)
; CHECK-NEXT:    ld2b.zx %s1, 1672(, %s11)
; CHECK-NEXT:    ld2b.zx %s2, 1680(, %s11)
; CHECK-NEXT:    ld2b.zx %s3, 1688(, %s11)
; CHECK-NEXT:    ld2b.zx %s4, 1696(, %s11)
; CHECK-NEXT:    adds.w.sx %s1, %s1, %s34
; CHECK-NEXT:    adds.w.sx %s2, %s2, %s7
; CHECK-NEXT:    adds.w.sx %s3, %s3, %s6
; CHECK-NEXT:    adds.w.sx %s4, %s4, %s5
; CHECK-NEXT:    st2b %s4, 254(, %s0)
; CHECK-NEXT:    st2b %s3, 252(, %s0)
; CHECK-NEXT:    st2b %s2, 250(, %s0)
; CHECK-NEXT:    st2b %s1, 248(, %s0)
; CHECK-NEXT:    st2b %s35, 246(, %s0)
; CHECK-NEXT:    st2b %s36, 244(, %s0)
; CHECK-NEXT:    st2b %s37, 242(, %s0)
; CHECK-NEXT:    st2b %s38, 240(, %s0)
; CHECK-NEXT:    st2b %s39, 238(, %s0)
; CHECK-NEXT:    st2b %s40, 236(, %s0)
; CHECK-NEXT:    st2b %s41, 234(, %s0)
; CHECK-NEXT:    st2b %s42, 232(, %s0)
; CHECK-NEXT:    st2b %s43, 230(, %s0)
; CHECK-NEXT:    st2b %s44, 228(, %s0)
; CHECK-NEXT:    st2b %s45, 226(, %s0)
; CHECK-NEXT:    st2b %s46, 224(, %s0)
; CHECK-NEXT:    st2b %s47, 222(, %s0)
; CHECK-NEXT:    st2b %s48, 220(, %s0)
; CHECK-NEXT:    st2b %s49, 218(, %s0)
; CHECK-NEXT:    st2b %s50, 216(, %s0)
; CHECK-NEXT:    st2b %s51, 214(, %s0)
; CHECK-NEXT:    st2b %s52, 212(, %s0)
; CHECK-NEXT:    st2b %s53, 210(, %s0)
; CHECK-NEXT:    st2b %s54, 208(, %s0)
; CHECK-NEXT:    st2b %s55, 206(, %s0)
; CHECK-NEXT:    st2b %s56, 204(, %s0)
; CHECK-NEXT:    st2b %s57, 202(, %s0)
; CHECK-NEXT:    st2b %s58, 200(, %s0)
; CHECK-NEXT:    st2b %s59, 198(, %s0)
; CHECK-NEXT:    st2b %s60, 196(, %s0)
; CHECK-NEXT:    st2b %s61, 194(, %s0)
; CHECK-NEXT:    st2b %s62, 192(, %s0)
; CHECK-NEXT:    st2b %s63, 190(, %s0)
; CHECK-NEXT:    st2b %s18, 188(, %s0)
; CHECK-NEXT:    st2b %s19, 186(, %s0)
; CHECK-NEXT:    st2b %s20, 184(, %s0)
; CHECK-NEXT:    st2b %s21, 182(, %s0)
; CHECK-NEXT:    st2b %s22, 180(, %s0)
; CHECK-NEXT:    st2b %s23, 178(, %s0)
; CHECK-NEXT:    st2b %s24, 176(, %s0)
; CHECK-NEXT:    st2b %s25, 174(, %s0)
; CHECK-NEXT:    st2b %s26, 172(, %s0)
; CHECK-NEXT:    st2b %s27, 170(, %s0)
; CHECK-NEXT:    st2b %s28, 168(, %s0)
; CHECK-NEXT:    st2b %s29, 166(, %s0)
; CHECK-NEXT:    st2b %s30, 164(, %s0)
; CHECK-NEXT:    st2b %s31, 162(, %s0)
; CHECK-NEXT:    st2b %s32, 160(, %s0)
; CHECK-NEXT:    st2b %s33, 158(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 180(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 156(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 184(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 154(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 188(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 152(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 192(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 150(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 196(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 148(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 200(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 146(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 204(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 144(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 208(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 142(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 212(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 140(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 216(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 138(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 220(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 136(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 224(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 134(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 228(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 132(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 232(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 130(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 236(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 128(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 240(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 126(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 244(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 124(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 248(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 122(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 252(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 120(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 256(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 118(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 260(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 116(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 264(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 114(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 268(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 112(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 272(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 110(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 276(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 108(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 280(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 106(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 284(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 104(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 288(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 102(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 292(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 100(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 296(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 98(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 300(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 96(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 304(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 94(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 308(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 92(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 312(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 90(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 316(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 88(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 320(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 86(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 324(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 84(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 328(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 82(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 332(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 80(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 336(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 78(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 340(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 76(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 344(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 74(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 348(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 72(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 352(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 70(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 356(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 68(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 360(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 66(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 364(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 64(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 368(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 62(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 372(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 60(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 376(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 58(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 380(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 56(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 384(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 54(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 388(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 52(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 392(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 50(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 396(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 48(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 400(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 46(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 404(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 44(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 408(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 42(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 412(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 40(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 416(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 38(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 420(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 36(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 424(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 34(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 428(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 32(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 432(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 30(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 436(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 28(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 440(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 26(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 444(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 24(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 448(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 22(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 452(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 20(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 456(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 18(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 460(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 16(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 464(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 14(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 468(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 12(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 472(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 10(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 476(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 8(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 480(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 6(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 484(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 4(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 488(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, 2(, %s0)
; CHECK-NEXT:    ldl.sx %s1, 492(, %s11) # 4-byte Folded Reload
; CHECK-NEXT:    st2b %s1, (, %s0)
; CHECK-NEXT:    ld %s33, 664(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s32, 656(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s31, 648(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s30, 640(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s29, 632(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s28, 624(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s27, 616(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s26, 608(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s25, 600(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s24, 592(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s23, 584(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s22, 576(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s21, 568(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s20, 560(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s19, 552(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    ld %s18, 544(, %s11) # 8-byte Folded Reload
; CHECK-NEXT:    or %s11, 0, %s9
; CHECK-NEXT:    ld %s10, 8(, %s11)
; CHECK-NEXT:    ld %s9, (, %s11)
; CHECK-NEXT:    b.l.t (, %s10)
  %z = add <128 x i16> %x, %y
  ret <128 x i16> %z
}

