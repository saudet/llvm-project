; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -march=ve -mattr=+vpu | FileCheck %s

;;; 256 x f32

define fastcc <256 x float> @test_vp_ffms_vvv_256f32(<256 x float> %i0, <256 x float> %i1, <256 x float> %i2, <256 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_ffms_vvv_256f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vfmsb.s %v0, %v2, %v0, %v1
; CHECK-NEXT:    b.l.t (, %s10)
  %mul = call contract <256 x float> @llvm.vp.fmul.v256f32(<256 x float> %i0, <256 x float> %i1, <256 x i1> %m, i32 %n)
  %fma = call contract <256 x float> @llvm.vp.fsub.v256f32(<256 x float> %mul, <256 x float> %i2, <256 x i1> %m, i32 %n)
  ret <256 x float> %fma
}

define fastcc <256 x float> @test_vp_ffms_rvv_256f32(float %s0, <256 x float> %i1, <256 x float> %i2, <256 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_ffms_rvv_256f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vfmsb.s %v0, %v1, %s0, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %b0 = insertelement <256 x float> undef, float %s0, i32 0
  %i0 = shufflevector <256 x float> %b0, <256 x float> poison, <256 x i32> zeroinitializer
  %mul = call contract <256 x float> @llvm.vp.fmul.v256f32(<256 x float> %i0, <256 x float> %i1, <256 x i1> %m, i32 %n)
  %fma = call contract <256 x float> @llvm.vp.fsub.v256f32(<256 x float> %mul, <256 x float> %i2, <256 x i1> %m, i32 %n)
  ret <256 x float> %fma
}

define fastcc <256 x float> @test_vp_ffms_vrv_256f32(<256 x float> %i0, float %s1, <256 x float> %i2, <256 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_ffms_vrv_256f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vfmsb.s %v0, %v1, %s0, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %b1 = insertelement <256 x float> undef, float %s1, i32 0
  %i1 = shufflevector <256 x float> %b1, <256 x float> poison, <256 x i32> zeroinitializer
  %mul = call contract <256 x float> @llvm.vp.fmul.v256f32(<256 x float> %i0, <256 x float> %i1, <256 x i1> %m, i32 %n)
  %fma = call contract <256 x float> @llvm.vp.fsub.v256f32(<256 x float> %mul, <256 x float> %i2, <256 x i1> %m, i32 %n)
  ret <256 x float> %fma
}

define fastcc <256 x float> @test_vp_ffms_vvr_256f32(<256 x float> %i0, <256 x float> %i1, float %s2, <256 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_ffms_vvr_256f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vfmsb.s %v0, %s0, %v0, %v1
; CHECK-NEXT:    b.l.t (, %s10)
  %b2 = insertelement <256 x float> undef, float %s2, i32 0
  %i2 = shufflevector <256 x float> %b2, <256 x float> poison, <256 x i32> zeroinitializer
  %mul = call contract <256 x float> @llvm.vp.fmul.v256f32(<256 x float> %i0, <256 x float> %i1, <256 x i1> %m, i32 %n)
  %fma = call contract <256 x float> @llvm.vp.fsub.v256f32(<256 x float> %mul, <256 x float> %i2, <256 x i1> %m, i32 %n)
  ret <256 x float> %fma
}

declare <256 x float> @llvm.vp.fsub.v256f32(<256 x float>, <256 x float>, <256 x i1>, i32)
declare <256 x float> @llvm.vp.fmul.v256f32(<256 x float>, <256 x float>, <256 x i1>, i32)

;;; 256 x f64

define fastcc <256 x double> @test_vp_ffms_vvv_256f64(<256 x double> %i0, <256 x double> %i1, <256 x double> %i2, <256 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_ffms_vvv_256f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s0, %s0, (32)0
; CHECK-NEXT:    lvl %s0
; CHECK-NEXT:    vfmsb.d %v0, %v2, %v0, %v1
; CHECK-NEXT:    b.l.t (, %s10)
  %mul = call contract <256 x double> @llvm.vp.fmul.v256f64(<256 x double> %i0, <256 x double> %i1, <256 x i1> %m, i32 %n)
  %fma = call contract <256 x double> @llvm.vp.fsub.v256f64(<256 x double> %mul, <256 x double> %i2, <256 x i1> %m, i32 %n)
  ret <256 x double> %fma
}

define fastcc <256 x double> @test_vp_ffms_rvv_256f64(double %s0, <256 x double> %i1, <256 x double> %i2, <256 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_ffms_rvv_256f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vfmsb.d %v0, %v1, %s0, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %b0 = insertelement <256 x double> undef, double %s0, i32 0
  %i0 = shufflevector <256 x double> %b0, <256 x double> poison, <256 x i32> zeroinitializer
  %mul = call contract <256 x double> @llvm.vp.fmul.v256f64(<256 x double> %i0, <256 x double> %i1, <256 x i1> %m, i32 %n)
  %fma = call contract <256 x double> @llvm.vp.fsub.v256f64(<256 x double> %mul, <256 x double> %i2, <256 x i1> %m, i32 %n)
  ret <256 x double> %fma
}

define fastcc <256 x double> @test_vp_ffms_vrv_256f64(<256 x double> %i0, double %s1, <256 x double> %i2, <256 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_ffms_vrv_256f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vfmsb.d %v0, %v1, %s0, %v0
; CHECK-NEXT:    b.l.t (, %s10)
  %b1 = insertelement <256 x double> undef, double %s1, i32 0
  %i1 = shufflevector <256 x double> %b1, <256 x double> poison, <256 x i32> zeroinitializer
  %mul = call contract <256 x double> @llvm.vp.fmul.v256f64(<256 x double> %i0, <256 x double> %i1, <256 x i1> %m, i32 %n)
  %fma = call contract <256 x double> @llvm.vp.fsub.v256f64(<256 x double> %mul, <256 x double> %i2, <256 x i1> %m, i32 %n)
  ret <256 x double> %fma
}

define fastcc <256 x double> @test_vp_ffms_vvr_256f64(<256 x double> %i0, <256 x double> %i1, double %s2, <256 x i1> %m, i32 %n) {
; CHECK-LABEL: test_vp_ffms_vvr_256f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    and %s1, %s1, (32)0
; CHECK-NEXT:    lvl %s1
; CHECK-NEXT:    vfmsb.d %v0, %s0, %v0, %v1
; CHECK-NEXT:    b.l.t (, %s10)
  %b2 = insertelement <256 x double> undef, double %s2, i32 0
  %i2 = shufflevector <256 x double> %b2, <256 x double> poison, <256 x i32> zeroinitializer
  %mul = call contract <256 x double> @llvm.vp.fmul.v256f64(<256 x double> %i0, <256 x double> %i1, <256 x i1> %m, i32 %n)
  %fma = call contract <256 x double> @llvm.vp.fsub.v256f64(<256 x double> %mul, <256 x double> %i2, <256 x i1> %m, i32 %n)
  ret <256 x double> %fma
}

declare <256 x double> @llvm.vp.fsub.v256f64(<256 x double>, <256 x double>, <256 x i1>, i32)
declare <256 x double> @llvm.vp.fmul.v256f64(<256 x double>, <256 x double>, <256 x i1>, i32)
